# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Publish Release

on:
  push:
    branches: [master]

jobs:
  setup:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0
          ref: 'master'
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-14-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-14-yarn-
      - run: yarn install --immutable
      - run: yarn constraints
      - run: yarn nx affected --target=lint
      - run: yarn nx affected --target=test
      - run: yarn nx affected --target=integration

  # version-check:
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         token: ${{ secrets.BOT_TOKEN }}
  #         fetch-depth: 0
  #         ref: 'master'
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: 14
  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: |
  #         echo "::set-output name=dir::$(yarn config get cacheFolder)"
  #     - uses: actions/cache@v2
  #       id: yarn-cache
  #       with:
  #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #         key: ${{ runner.os }}-14-yarn-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-14-yarn-
  #     - run: yarn install --immutable
  #     - run: yarn version check
  #     - run: yarn check:versions

  release:
    needs: [setup, version-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0
          ref: 'master'
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-14-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-14-yarn-
      - run: yarn install --immutable
      # TODO: ngx-deploy-npm? Or continue to leverage nx + yarn npm publish command?
      - name: Release
        run: |
          yarn config set npmAuthToken "${{ secrets.NPM_TOKEN }}"
          git config --global user.email ${{ secrets.GH_EMAIL }}
          git config --global user.name ${{ secrets.GH_USER }}
          yarn nx affected --target version --dryRun --baseBranch master --preid canary
          yarn nx affected --target publish
          git push && git push --tags

      # TODO: nx caching
      - run: yarn nx build docusaurus
      - name: Deploy docs
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: gh-pages
          build_dir: docusaurus/build
          commit_message: deployed docs [skip ci]
          committer: ${{ secrets.GH_USER }} ${{ secrets.GH_EMAIL }}
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
