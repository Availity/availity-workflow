"use strict";(self.webpackChunk_availity_dinosaurdocs=self.webpackChunk_availity_dinosaurdocs||[]).push([[967],{1005:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"tutorial/deploy","title":"Creating a Deployment","description":"If you have made it this far then you must mean business. The application must have 100% test coverage and be ready to be deployed on a Friday afternoon to production. \ud83d\ude09","source":"@site/docs/tutorial/deploy.md","sourceDirName":"tutorial","slug":"/tutorial/deploy","permalink":"/availity-workflow/tutorial/deploy","draft":false,"unlisted":false,"editUrl":"https://github.com/availity/availity-workflow/edit/master/docusaurus/docs/tutorial/deploy.md","tags":[],"version":"current","frontMatter":{"title":"Creating a Deployment"},"sidebar":"someSidebar","previous":{"title":"Bring on the Mocks","permalink":"/availity-workflow/tutorial/mocks"},"next":{"title":"Dependency Management","permalink":"/availity-workflow/tutorial/dependency-management"}}');var i=n(2540),s=n(3023);const r={title:"Creating a Deployment"},a=void 0,l={},d=[{value:"Running the Build Script",id:"running-the-build-script",level:2},{value:"Selecting a Version Bump",id:"selecting-a-version-bump",level:2},{value:"Pushing the Commit",id:"pushing-the-commit",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"If you have made it this far then you must mean business. The application must have 100% test coverage and be ready to be deployed on a Friday afternoon to production. \ud83d\ude09"}),"\n",(0,i.jsx)(t.p,{children:"In all seriousness let's start on how to get your application in a deploy ready state."}),"\n",(0,i.jsx)(t.h2,{id:"running-the-build-script",children:"Running the Build Script"}),"\n",(0,i.jsxs)(t.p,{children:["Our CLI ships with two different commands for building your deployments. The first is the ",(0,i.jsx)(t.code,{children:"staging"})," command and the second is ",(0,i.jsx)(t.code,{children:"production"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["Both commands run the same CLI workflow, the only difference is that the ",(0,i.jsx)(t.code,{children:"production"})," command will minify your code for a smaller gzip footprint."]}),"\n",(0,i.jsxs)(t.p,{children:["For testing purposes let's use the ",(0,i.jsx)(t.code,{children:"staging"})," command below to get started:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"yarn staging\n"})}),"\n",(0,i.jsx)(t.h2,{id:"selecting-a-version-bump",children:"Selecting a Version Bump"}),"\n",(0,i.jsx)(t.p,{children:"You should now be prompted to select what type of version bump you would like:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",metastring:"hideCopy=true",children:"? What type of version bump would you like to do?\n  1) patch ( 0.1.0 => 0.1.1 )\n  2) minor ( 0.1.0 => 0.2.0 )\n  3) major ( 0.1.0 => 1.0.0 )\n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  4) other\n  Answer: 1\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can choose whichever version bump you wish, typically we follow the ",(0,i.jsx)(t.a,{href:"https://docs.npmjs.com/about-semantic-versioning",children:"semver versioning"})," strategy for what version bump we want to give in our deployment stage, however for projects that aren't using NPM its not a huge deal."]}),"\n",(0,i.jsxs)(t.p,{children:["Once entered, the CLI will bundle the app in the ",(0,i.jsx)(t.code,{children:"./dist"})," directory and create a tag with the appropriate version."]}),"\n",(0,i.jsx)(t.h2,{id:"pushing-the-commit",children:"Pushing the Commit"}),"\n",(0,i.jsxs)(t.p,{children:["There will already be a commit created with the version bump and ",(0,i.jsx)(t.code,{children:"dist"})," folder updates included. You will want to push this and the git tag that was auto generated up to your version control."]}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsxs)(t.p,{children:["Note that if you are needing the ",(0,i.jsx)(t.code,{children:"dist"})," folder to be committed you will need to double check the folder is not added to the ",(0,i.jsx)(t.code,{children:".gitignore"})," file."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"git push && git push --tags\n"})}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(t.p,{children:["Congratulations! You successfully created your first deployment artifact! You can choose to read more about the additional features that our Workflow toolkit provides in the ",(0,i.jsx)(t.code,{children:"Recipes"})," section."]}),"\n",(0,i.jsxs)(t.p,{children:["Checkout our ",(0,i.jsx)(t.a,{href:"https://availity.github.io/element/",children:"React Component Library"})," for some pre-built Material UI components to assist in building solid web applications."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3023:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(3696);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);